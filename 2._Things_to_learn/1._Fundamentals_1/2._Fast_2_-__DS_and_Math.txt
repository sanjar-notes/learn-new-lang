Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.6
Creation-Date: 2021-03-14T02:02:39+05:30

====== 2. Fast 2 -  DS and Math ======
Created Sunday 14 March 2021

Assumption - you know only about basic conditionals, global variables, loops etc.

=== Variables ===
[ ] How are variables stored in memory?
[ ] Pooling exists?
[ ] References for deep copies. Is this the default?
[ ] References for assignment. Is this the default?
[ ] Sentinel value - ''null''
[ ] Numerical infinity - INT_MAX or otherwise.

=== DS requirements ===
[ ] Basic OOP - creating objects, using methods. Duck test
[ ] Import standard library modules - duck test will do.
[ ] Syntax for using generics
[ ] Autoboxing

=== Things to study in every DS ===
Common operations in all data structures, follow this pattern for all:
	[ ] Access ith element
	[ ] Insert element - at head, tail, given index.
	[ ] Remove element - at head, tail, given index.
	[ ] Membership - of subarray/substring or single element. e.g ''x.includes()'' or ''in'' in Python3
	[ ] slicing - create subarray
	[ ] splicing - remove/insert a string at given head/tail/index
	[ ] Resize array
	[ ] Linear search(index of key)

Important operations in problems:
	[ ] reversal of array
	* sorting
		[ ] Numerical(default)
		[ ] Reversed
		[ ] Criteria based
	* Binary search:
		[ ] Binary search, for sorted array.
		[ ] Upper and lower bounds, in a sorted array.
	[ ] Finding min, max, and both min and max, in one pass.
Note: For search, do see unsuccessful search.

Representation in memory:
[ ] Are they dynamic(in size)?
[ ] Are they immutable?

=== Linear Data structures ===
[ ] Strings - extra ops: startWith, endsWith
[ ] Array(vector)
[ ] Tuple(especially ''pair'' if it exists)
[ ] Stack
[ ] Queue
[ ] LinkedList
[ ] hashMap(dictionary) - ordered and unordered
[ ] hashSet - ordered and unordered
[ ] multiset(optional)
[ ] multimap(optional)
Note: Hash structures only for standard types - number.

=== Iterators(optional) ===
* Learn about iterators in the language.
* Do they go both/forward backward.

=== Non-linear Data structures ===
* All ops same as linear data structures except subarry extraction/insertion.
1. Trees
	[ ] Binary Trees
	[ ] Heap(both min and max)
	[ ] n-ary trees(optional)
2. Graphs - basic graph representations in the language.

You can solve any problem now, although the code might be bad.

=== Math(optional) ===
* Import/include the standard math library and explore.
* Some functions shown here may not exist explicilty, but can be done by using basic casting etc.
* Basic:
	[ ] max(a, b)
	[ ] min(a, b)
	[ ] ceil
	[ ] floor
	[ ] truncate
	[ ] round
	[ ] floored division
* Random:
	[ ] Generate number between 0 and 1
	[ ] Generate number for given range
* Exponential and logarithmic
	[ ] sqrt
	[ ] power(a, b)
	[ ] exp
	[ ] log - natural
	[ ] log10
* Trig functions
	[ ] Pi - the constant
	[ ] Basic 3 - sin, cos, tan
	[ ] Convert radian â†” degrees
